// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: grpc.proto

package forwarder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcServiceClient is the client API for GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServiceClient interface {
	SayHello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateSrcIfaceLook(ctx context.Context, in *CreateSrcIfLookTableRequest, opts ...grpc.CallOption) (*Response, error)
	CreateMyStation(ctx context.Context, in *CreateMyStationTableRequest, opts ...grpc.CallOption) (*Response, error)
	CreateRoute(ctx context.Context, in *CreateRouteTableRequest, opts ...grpc.CallOption) (*Response, error)
	CreatePDR(ctx context.Context, in *CreatePDRRequest, opts ...grpc.CallOption) (*Response, error)
	UpdatePDR(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	RemovePDR(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateFAR(ctx context.Context, in *CreateFARRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateFAR(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	RemoveFAR(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type grpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServiceClient(cc grpc.ClientConnInterface) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) SayHello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) CreateSrcIfaceLook(ctx context.Context, in *CreateSrcIfLookTableRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcService/CreateSrcIfaceLook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) CreateMyStation(ctx context.Context, in *CreateMyStationTableRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcService/CreateMyStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) CreateRoute(ctx context.Context, in *CreateRouteTableRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcService/CreateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) CreatePDR(ctx context.Context, in *CreatePDRRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcService/CreatePDR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) UpdatePDR(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcService/UpdatePDR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) RemovePDR(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcService/RemovePDR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) CreateFAR(ctx context.Context, in *CreateFARRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcService/CreateFAR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) UpdateFAR(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcService/UpdateFAR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) RemoveFAR(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcService/RemoveFAR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServiceServer is the server API for GrpcService service.
// All implementations must embed UnimplementedGrpcServiceServer
// for forward compatibility
type GrpcServiceServer interface {
	SayHello(context.Context, *Request) (*Response, error)
	CreateSrcIfaceLook(context.Context, *CreateSrcIfLookTableRequest) (*Response, error)
	CreateMyStation(context.Context, *CreateMyStationTableRequest) (*Response, error)
	CreateRoute(context.Context, *CreateRouteTableRequest) (*Response, error)
	CreatePDR(context.Context, *CreatePDRRequest) (*Response, error)
	UpdatePDR(context.Context, *Request) (*Response, error)
	RemovePDR(context.Context, *Request) (*Response, error)
	CreateFAR(context.Context, *CreateFARRequest) (*Response, error)
	UpdateFAR(context.Context, *Request) (*Response, error)
	RemoveFAR(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGrpcServiceServer()
}

// UnimplementedGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServiceServer struct {
}

func (UnimplementedGrpcServiceServer) SayHello(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGrpcServiceServer) CreateSrcIfaceLook(context.Context, *CreateSrcIfLookTableRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSrcIfaceLook not implemented")
}
func (UnimplementedGrpcServiceServer) CreateMyStation(context.Context, *CreateMyStationTableRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMyStation not implemented")
}
func (UnimplementedGrpcServiceServer) CreateRoute(context.Context, *CreateRouteTableRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (UnimplementedGrpcServiceServer) CreatePDR(context.Context, *CreatePDRRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePDR not implemented")
}
func (UnimplementedGrpcServiceServer) UpdatePDR(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePDR not implemented")
}
func (UnimplementedGrpcServiceServer) RemovePDR(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePDR not implemented")
}
func (UnimplementedGrpcServiceServer) CreateFAR(context.Context, *CreateFARRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFAR not implemented")
}
func (UnimplementedGrpcServiceServer) UpdateFAR(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFAR not implemented")
}
func (UnimplementedGrpcServiceServer) RemoveFAR(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFAR not implemented")
}
func (UnimplementedGrpcServiceServer) mustEmbedUnimplementedGrpcServiceServer() {}

// UnsafeGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServiceServer will
// result in compilation errors.
type UnsafeGrpcServiceServer interface {
	mustEmbedUnimplementedGrpcServiceServer()
}

func RegisterGrpcServiceServer(s grpc.ServiceRegistrar, srv GrpcServiceServer) {
	s.RegisterService(&GrpcService_ServiceDesc, srv)
}

func _GrpcService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).SayHello(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_CreateSrcIfaceLook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSrcIfLookTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).CreateSrcIfaceLook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcService/CreateSrcIfaceLook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).CreateSrcIfaceLook(ctx, req.(*CreateSrcIfLookTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_CreateMyStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMyStationTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).CreateMyStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcService/CreateMyStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).CreateMyStation(ctx, req.(*CreateMyStationTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcService/CreateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).CreateRoute(ctx, req.(*CreateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_CreatePDR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePDRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).CreatePDR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcService/CreatePDR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).CreatePDR(ctx, req.(*CreatePDRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_UpdatePDR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).UpdatePDR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcService/UpdatePDR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).UpdatePDR(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_RemovePDR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).RemovePDR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcService/RemovePDR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).RemovePDR(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_CreateFAR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFARRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).CreateFAR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcService/CreateFAR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).CreateFAR(ctx, req.(*CreateFARRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_UpdateFAR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).UpdateFAR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcService/UpdateFAR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).UpdateFAR(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_RemoveFAR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).RemoveFAR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcService/RemoveFAR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).RemoveFAR(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcService_ServiceDesc is the grpc.ServiceDesc for GrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _GrpcService_SayHello_Handler,
		},
		{
			MethodName: "CreateSrcIfaceLook",
			Handler:    _GrpcService_CreateSrcIfaceLook_Handler,
		},
		{
			MethodName: "CreateMyStation",
			Handler:    _GrpcService_CreateMyStation_Handler,
		},
		{
			MethodName: "CreateRoute",
			Handler:    _GrpcService_CreateRoute_Handler,
		},
		{
			MethodName: "CreatePDR",
			Handler:    _GrpcService_CreatePDR_Handler,
		},
		{
			MethodName: "UpdatePDR",
			Handler:    _GrpcService_UpdatePDR_Handler,
		},
		{
			MethodName: "RemovePDR",
			Handler:    _GrpcService_RemovePDR_Handler,
		},
		{
			MethodName: "CreateFAR",
			Handler:    _GrpcService_CreateFAR_Handler,
		},
		{
			MethodName: "UpdateFAR",
			Handler:    _GrpcService_UpdateFAR_Handler,
		},
		{
			MethodName: "RemoveFAR",
			Handler:    _GrpcService_RemoveFAR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
